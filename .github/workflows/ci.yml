name: CI

on:
  pull_request:
  push:
    branches: [ main ]

# Cancel in-flight runs on the same branch/PR to save time
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- SDKs ----------
  sdk-ts:
    name: TS SDK (orval) — generate & check drift
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack + pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Install workspace deps
        run: pnpm install

      - name: Generate TS SDK (orval)
        working-directory: packages/ts-sdk
        run: pnpm run generate

      - name: Fail if TS SDK drifted
        run: |
          git diff --exit-code -- packages/ts-sdk/src/index.ts || \
          (echo "::error ::TS SDK out of date. Run 'pnpm -C packages/ts-sdk run generate' and commit the changes."; exit 1)

  sdk-py:
    name: Python SDK (openapi-python-client) — generate & check drift
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Generate Python SDK
        working-directory: apps/api
        run: |
          uv run openapi-python-client generate \
            --path ../../packages/schemas/openapi.yaml \
            --output-path ../../packages/py-sdk \
            --meta none --overwrite

      - name: Fail if Python SDK drifted
        run: |
          git diff --exit-code -- packages/py-sdk || \
          (echo "::error ::Python SDK out of date. Regenerate from apps/api and commit."; exit 1)

  # ---------- Node (web + any TS pkgs) ----------
  node:
    name: Node — lint • typecheck • test • build
    runs-on: ubuntu-latest
    needs: [sdk-ts]        # ensure TS SDK is up-to-date first
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Enable corepack + pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Install
        run: pnpm install

      # Lint everything (monorepo); adjust paths if you only want apps/web
      - name: Lint
        run: pnpm -w run lint || pnpm -C apps/web run lint

      # Typecheck (treat warnings as success if you prefer)
      - name: Typecheck
        run: pnpm -w run typecheck || pnpm -C apps/web run typecheck

      # Tests (vitest) - skip if you haven't added tests yet
      - name: Test
        run: pnpm -w run test --if-present || pnpm -C apps/web run test --if-present

      # Build (vite build / any lib builds)
      - name: Build
        run: pnpm -w run build || pnpm -C apps/web run build

  # ---------- Python API ----------
  python-api:
    name: Python API — ruff • tests • (mypy optional)
    runs-on: ubuntu-latest
    needs: [sdk-py]       # ensure Python SDK is up-to-date first
    defaults:
      run:
        working-directory: apps/api
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      # Cache uv artifacts (optional, speeds up)
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            apps/api/.venv
          key: uv-${{ runner.os }}-api-${{ hashFiles('apps/api/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-api-

      - name: Sync deps (locked if using constraints)
        run: uv sync

      - name: Ruff (lint)
        run: uv run ruff check .

      # Optional static typing; enable when ready
      # - name: mypy (type check)
      #   run: uv run mypy .

      - name: Tests (pytest)
        run: uv run pytest -q

  # ---------- Python Worker ----------
  python-worker:
    name: Python Worker — ruff • tests • (mypy optional)
    runs-on: ubuntu-latest
    needs: [sdk-py]
    defaults:
      run:
        working-directory: apps/worker
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            apps/worker/.venv
          key: uv-${{ runner.os }}-worker-${{ hashFiles('apps/worker/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-worker-

      - name: Sync deps
        run: uv sync

      - name: Ruff (lint)
        run: uv run ruff check .

      # - name: mypy (type check)
      #   run: uv run mypy .

      - name: Tests (pytest)
        run: uv run pytest -q

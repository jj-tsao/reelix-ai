

# ===== Boostrap Dependencies =====

import os
from typing import List

import nltk
from qdrant_client import QdrantClient
from reelix_core.config import (
    NLTK_PATH,
    QDRANT_MOVIE_COLLECTION_NAME,
    QDRANT_TV_COLLECTION_NAME,
)
from reelix_models.custom_models import (
    load_bm25_files,
    load_cross_encoder,
    load_sentence_model,
    setup_intent_classifier,
)
from reelix_ranking.types import Candidate
from reelix_recommendation.first_rec import FirstRecommendPipeline
from reelix_retrieval.base_retriever import BaseRetriever
from reelix_retrieval.query_encoder import Encoder
from reelix_retrieval.filter_builder import build_qfilter

QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
QDRANT_ENDPOINT = os.getenv("QDRANT_ENDPOINT")

os.environ.setdefault("TOKENIZERS_PARALLELISM", "false")

nltk_data_path = str(NLTK_PATH)
if nltk_data_path not in nltk.data.path:
    nltk.data.path.append(nltk_data_path)

intent_classifier = setup_intent_classifier()
embed_model = load_sentence_model()
bm25_models, bm25_vocabs = load_bm25_files()
query_encoder = Encoder(embed_model, bm25_models, bm25_vocabs)
cross_encoder = load_cross_encoder()
qdrant = QdrantClient(url=QDRANT_ENDPOINT, api_key=QDRANT_API_KEY)

base_retriever = BaseRetriever(
    client=qdrant,
    movie_collection=QDRANT_MOVIE_COLLECTION_NAME,
    tv_collection=QDRANT_TV_COLLECTION_NAME,
    dense_vector_name="dense_vector",
    sparse_vector_name="sparse_vector",
)
pipeline = FirstRecommendPipeline(base_retriever, ce_model=cross_encoder, rrf_k=60)


# ===== utils =====

def summarize_ranking(ranking: List[Candidate], top_k: int=20):
    for idx, r in enumerate(ranking[:top_k], start=1):
        print (f"#{idx}: Title: {r.payload['title']} | Dense Score: {r.dense_score} | Sparse Score: {r.sparse_score} | Rating: {r.payload['vote_average']} | Popularity: {r.payload['popularity']}")


def bm25_query_from_signals(genres_inc, keywords_inc):
    # 1) collect and weight terms
    # vibe_tags_weighted: list[("slow-burn", 0.9), ("psychological", 0.8), ...]
    def reps(w):
        # map w in [0,1] to repetitions; tune as you like
        return 1 if w < 0.4 else 2 if w < 0.6 else 3 if w < 0.8 else 4

    bag = []
    # light boost for included genres (don’t add too many)
    for g in (genres_inc or []):
        bag += [g] * 2

    for k in (keywords_inc or []):
        bag += [k] * 3

    # 3) collapse back to a short “query doc”
    return " ".join(bag[:60])  # guardrail on length


# ===== First Rec pipeline test =====

media_type = "movie"
GENRES = ["Crime","Thriller","Action"]
KEYWORDS = ["Gritty","Plot-Twisty","Slow-burn","Suspenseful","Psychological","Dark","Espionage","High-Stakes","Coming-of-Age","Romantic Comedy","Heartwarming","Bittersweet"]

dense_vec = [-0.04712927,0.0710609,-0.0076090693,-0.023012687,0.023074979,-0.00412415,0.047391996,0.03408366,0.0055327355,0.019979024,-0.003507327,0.045684062,-0.018169321,-0.030582681,0.04889188,0.004621466,-0.0046790293,-0.030841043,0.0041175513,-0.025367906,0.006733731,0.05011241,0.013982564,-0.030489163,-0.01061458,-0.0035414044,-0.10065367,-0.046866212,-0.032926843,0.057500683,0.03403466,-0.02816185,-0.051156346,-0.00080052024,-0.03216799,-0.016559321,-0.0027639712,-0.004518829,-0.013386199,-0.037642647,-0.0041418653,-0.000798601,0.034394994,0.007962441,-0.05076165,0.04613527,-0.07161636,-0.02350734,-0.028861642,0.0074437843,0.011198359,-0.0072740237,0.0017603728,0.08230657,-0.016224321,0.03980018,-0.02608795,0.034707192,-0.06719095,0.001774667,0.0053380565,-0.03160663,0.006599703,-0.02645026,0.040174432,-0.022185428,0.051699206,-0.0053793667,-0.025772138,0.008793082,0.03238906,-0.024858326,0.040530544,-0.019215293,-0.079184555,-0.06740486,-0.03911589,-0.031344507,0.012456408,-0.004912233,0.037935544,0.05701509,0.02806267,0.037724502,0.0029566623,-0.027026897,-0.03187567,-0.009789227,0.009571968,0.02309407,0.025664043,-0.005367442,-0.028910004,0.04363552,0.010274659,0.050104655,-0.010713649,-0.003362367,-0.081946634,-0.030728953,0.05800076,0.04213709,0.00041639744,-0.044933718,0.061641283,-0.022833932,-0.011084232,0.038295627,0.037680626,0.027558059,-0.07203792,-0.056365274,0.009044,0.020113682,-0.058329854,-0.012263119,0.024332596,-0.020230768,0.08822183,0.018871455,0.041268673,-0.009729233,-0.047988914,0.01929837,0.017303338,-0.0037475717,0.010117542,-0.007626692,-0.048474018,-0.02692125,0.026673833,0.015386374,-0.027710073,-0.046698213,-0.027091676,0.06613978,0.07809912,0.0033195715,0.021865487,0.04015109,0.046240304,-0.021601273,0.005207655,-0.010908736,-0.042480875,0.01986727,0.05009141,0.04262407,0.034340385,-0.0052751442,-0.02938374,0.11773513,-0.042400382,-0.01601726,0.028023757,-0.03224171,0.04292539,-0.01694375,0.027780997,-0.017039621,-0.028600562,-0.06706515,0.037498783,0.079370484,0.0504409,-0.044218846,-0.015460429,0.009746215,-0.029643793,-0.08598989,-0.030550543,0.061338622,-0.019541265,-0.0053243246,0.026552686,-0.006885331,-0.0071271253,-0.037776697,0.021190856,-0.021129405,-0.007285511,0.020610534,-0.0188131,0.0023724108,0.03740317,0.0008144156,0.0068486193,0.026028588,-0.017585836,0.026917169,-0.03581008,0.03972992,0.041028593,-0.016959408,0.04553354,0.043159947,-0.035363875,-0.05659709,0.010080133,-0.030515516,-0.027533658,-0.018190313,-0.007892937,0.010518898,0.040253047,-0.02710752,-0.05239477,-0.02078184,-0.013199148,-0.029554477,0.015241649,-0.050993063,0.05476526,-0.0490319,-0.07565512,-0.033613008,0.012678848,0.039763775,-0.013813448,0.009819158,0.060329877,-0.0017279449,0.029784445,0.058541168,-0.034862462,0.033075232,-0.018302564,-0.08105456,0.014369554,0.014026862,-0.06137219,6.434035e-05,-0.029567454,0.075123556,0.001319923,0.0027909877,-0.1047295,-0.027443234,0.025438448,-0.019725535,0.03093367,-0.03164463,-0.023400467,0.059545584,0.04038537,0.082171924,0.0017024955,0.043099027,-0.039843358,0.018605432,-0.038022816,-0.005622322,-0.02496564,0.01661549,-0.012401248,0.034093402,0.03903205,0.032046612,-0.012384806,-0.007443731,-0.035197347,-0.005663505,-0.00321712,-0.0066181333,0.023500543,0.013728604,0.04449899,-0.0020915277,0.07066544,-0.08106232,-0.002916507,-0.00094995147,-0.015452098,0.0054003294,-0.048280407,0.0019418149,0.012462951,-0.027360681,0.0033636158,0.010523533,-0.053498138,0.04439816,-0.04779969,0.04065021,-0.01827171,0.02482855,0.023802325,-0.06379372,-0.007241195,-0.004184978,-0.010380089,0.07489388,0.05069094,0.03410895,-0.040402155,-0.03131164,-0.009762336,0.013138689,-0.008603544,-0.038372252,-0.009489716,0.034025587,0.028477602,-0.0123722395,0.012673168,-0.08871416,-0.018784342,0.045526233,-0.009676997,0.02845668,0.04567458,-0.056619298,0.0027022313,-0.00027285924,-0.02267864,0.040206753,-0.0273921,-0.07348647,-0.05711884,0.0019705088,-0.046451174,0.032138437,0.050016906,0.033359114,0.022064848,-0.00935798,-0.023425004,0.04589031,0.008196739,-0.034018274,-0.028650843,0.005836515,-0.01897889,0.038312294,-0.04046449,0.07351812,-0.021954436,0.030516692,0.01389862,0.045832105,-0.045268867,0.014582602,0.08555072,-0.060930323,-0.014704632,0.0074047213,-0.017110327,0.07220644,0.040267058,0.02496429,0.038594116,0.040540326,0.019746078,0.060071345,0.0048599537,0.0065664356,-0.010861262,-0.03833267,0.033319328,0.017481232,-0.024182262,-0.036699086,-0.031235985,-0.03327981,0.038584087,0.048971947,0.00068776886,-0.015505965,-0.02479574,0.0070220134,0.021111187,-0.016474076,-0.022226898,-0.0045986483,0.022959545,-0.0040584155,-0.008670322,0.011045642,-0.03766505,-0.004688244,0.014922035,-0.006265433,-0.016646054,-0.0033063132,-0.011793076,0.014122629,-0.026564647,-0.027290486,-0.058214083,-0.03185928,-0.029956972,-0.086553745,-0.019578645,-0.045304034,-0.00178194,0.08140013,-0.059884556,0.02978989,-0.0035497586,-0.038900852,0.03397324,-0.014378491,-0.009767492,0.04355862,-0.014437218,0.0017120559,0.018062877,0.03901879,0.0083170105,-0.068094924,0.021122131,-0.015990691,-0.009612179,0.010605511,-0.010843756,-0.06991818,-0.03047882,0.014068335,0.009985324,0.0004983774,0.032725308,-0.03433718,-0.011074423,-0.03032478,-0.055336777,-0.05254258,-0.023417234,0.0005303747,-0.030681062,-0.017876405,-0.047127094,-0.036212478,0.027081538,0.059635323,-0.028225806,-0.014321465,-0.010375272,0.013876453,0.02971896,0.014403047,0.0059153396,0.062280614,-0.013561967,0.039021224,0.029548593,0.0044968612,-0.030098336,0.042090822,-0.014296857,0.02923841,0.038831376,0.002290131,0.031194651,-0.0018914324,-0.03343327,-0.012821165,0.024612103,0.033664733,0.03451878,-0.037968084,-0.014871247,-0.02265313,0.008540484,0.032305636,-0.041211054,-0.009653548,0.043223843,0.0029286465,0.011370804,-0.001803526,-0.015857738,-0.047057863,-0.0033108236,-0.012260709,-0.020457083,-0.007304605,0.038240194,0.022747135,-0.027484281,0.013481682,0.021464283,-0.043126717,-0.03176769,0.023163773,0.017466476,0.0005901531,-0.007514817,0.012947585,0.040991135,-0.029796936,-0.0008150592,0.06279397,-0.034697197,0.01323951,0.054981157,0.041751023,0.024668295,0.0066883485,-0.010704596,-0.047528796,-0.03446028,-0.022431271,-0.025465999,0.04040934,0.029431863,-0.018477125,0.028084207,0.010727036,0.021536853,-0.023202304,-0.026557587,-0.016870284,0.03484554,-0.016562833,0.024301525,-0.010589809,-0.014842248,0.019006737,-0.036522865,-0.03144268,0.0047578695,0.017381206,0.0068882657,-0.030737367,-0.013237968,-0.04287602,-0.06454164,0.06278814,0.034888703,0.013711158,0.004356212,0.09019644,-0.0011590474,-0.0388653,0.025104566,-0.0182961,-0.022135818,-0.002895819,-0.024537548,0.047362287,-0.01269231,0.013665513,0.017954983,-0.0537167,0.050836675,0.0020780852,0.00014533933,-0.013826754,0.02667976,-0.044741765,0.01836734,0.0032528026,-0.017707534,0.03258998,0.041231617,-0.055740345,0.008355373,-0.025857296,-0.016990976,0.014604817,-0.048760638,0.0050327694,-0.008075367,-0.01844374,0.06468555,-0.08872107,-0.037808497,0.00026547842,0.036944136,0.08300097,0.026276566,-0.016909136,0.022291286,0.058339003,-0.032481402,0.08529143,-0.022181258,0.043774433,0.017542677,0.0020338676,-0.035878483,-0.015614,-0.036202345,0.059949316,-0.03696906,-0.024603225,-0.008806193,0.027885191,-0.029959902,-0.049137425,-0.009284021,-0.008650205,-0.010251478,0.015614618,0.026738392,-0.028170802,0.014934514,-0.004423034,-0.025734657,-0.025217498,0.039126158,0.01908878,-0.03241869,-0.030118844,-0.037782963,-0.013465072,0.03679544,0.027077695,0.04776328,-0.018685924,0.029608397,0.06721948,0.02497852,0.063177414,-0.04049991,-0.0007779472,0.06384931,-0.08757936,0.032722387,0.005882439,-0.025156839,-0.002303725,0.004447421,-0.054909304,0.031649094,0.018523015,0.025536507,0.029798528,-0.0484052,-0.036681455,0.035936438,-0.040383156,0.009037086,-0.033352576,-0.042941086,0.0014026572,0.008172104,-0.045201547,0.057164833,0.057701122,-0.04356395,0.061385024,0.008002917,-0.0328208,-0.0060111587,0.011195521,0.022915235,-0.0128052905,0.048057087,-0.029359559,-0.007727403,0.039775,-0.04187276,0.0005665867,-0.021911545,-0.025423821,-0.008946831,0.02145689,-0.025856744,0.040173654,-0.07420748,-0.017639766,0.020659506,-0.04420153,0.033546187,0.09189654,-0.022993416,0.04537902,-0.017335303,0.043602355,0.00824491,-0.03391963,-0.030629514,0.021238303,-0.0111544505,-0.033648446,-0.012550432,-0.0009959775,-0.012137792,0.0069262707,-0.015661245,-0.0065423925,0.015608098,-0.043891266,0.028708944,-0.047943085,0.021513892,0.0068636476,0.033296976,-0.010054478,-0.0035963934,0.028146219,-0.053158693,0.0026469405,-0.041102715,0.0015037191,0.013939097,-0.050161876,-0.045428503,0.1117002,0.030501297,0.023564909,-0.027693344,-0.029588513,-0.06363523,-0.026919816,-0.064436845,-0.026647974,0.008395532,0.09960508,-0.044130493,0.02893884,-0.08922958,-0.026538666,-0.038827065,0.07091236,-0.044528663,-0.0071801143,-0.048836917,-0.10559302,-0.026089175,0.059829604,0.017284416,0.031170128,0.0023133205,0.031924415,-0.035169885,0.054975595,0.016545838,-0.0072147553,0.021210684,-0.015832448,0.033654775,0.01490986,-0.025834607,0.033823688,-0.003795055,-0.018581852,-0.03447933,-0.010083936,-0.026540061,0.016234657,-0.006523664,0.028930584,0.03838484,-0.04653631,-0.022169098,-0.033525083,-0.01613904,0.026577173,-0.056560457,-0.064770035,0.017320907,-0.076557435,0.00966724,-0.052790478,0.0757092,-0.0017849344,0.09961382,0.032668926,0.054603115,-0.036267005,-0.003440924,0.042266794,0.009802803,-0.048199765,-0.035091117,-0.052413624]

bm25_tags = " ".join(GENRES + KEYWORDS)
bm25_tags = bm25_query_from_signals(GENRES, KEYWORDS)

sparse_vec = query_encoder.encode_sparse(bm25_tags, media_type)


qfilter = build_qfilter() #(genres=["Romance", "Thriller", "Action"], providers=["Netflix"])
dense_can = base_retriever.dense(dense_vec, media_type, limit=200, qfilter=qfilter)
sparse_can = base_retriever.sparse(sparse_vec, media_type, limit=200, qfilter=qfilter)


first_recs, _ = pipeline.run(media_type=media_type, dense_vec=dense_vec, sparse_vec=sparse_vec)

summarize_ranking(first_recs)

summarize_ranking(dense_can)
summarize_ranking(sparse_can)




